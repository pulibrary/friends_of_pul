{"version":3,"sources":["friends.behaviors.js"],"names":["$","Drupal","theme","prototype","friendsExampleButton","path","title","behaviors","friendsHideGalleryImage","attach","context","settings","once","parent","remove","jQuery"],"mappings":"CAAA,SAAAA,GAYAC,OAAAC,MAAAC,UAAAC,qBAAA,SAAAC,EAAAC,GAEA,MAAAN,GAAA,YAAAK,EAAA,YAAAC,EAAA,KAAAA,EAAA,SA0BAL,OAAAM,UAAAC,yBACAC,OAAA,SAAAC,EAAAC,GAOAX,EAAA,kBAAAU,GAAAE,KAAA,UAAA,WACAZ,EAAA,2CAAAa,SAAAC,cAOAC","file":"friends.scripts.min.js","sourcesContent":["(function ($) {\n\n  /**\n   * The recommended way for producing HTML markup through JavaScript is to write\n   * theming functions. These are similiar to the theming functions that you might\n   * know from 'phptemplate' (the default PHP templating engine used by most\n   * Drupal themes including Omega). JavaScript theme functions accept arguments\n   * and can be overriden by sub-themes.\n   *\n   * In most cases, there is no good reason to NOT wrap your markup producing\n   * JavaScript in a theme function.\n   */\n  Drupal.theme.prototype.friendsExampleButton = function (path, title) {\n    // Create an anchor element with jQuery.\n    return $('<a href=\"' + path + '\" title=\"' + title + '\">' + title + '</a>');\n  };\n\n  /**\n   * Behaviors are Drupal's way of applying JavaScript to a page. In short, the\n   * advantage of Behaviors over a simple 'document.ready()' lies in how it\n   * interacts with content loaded through Ajax. Opposed to the\n   * 'document.ready()' event which is only fired once when the page is\n   * initially loaded, behaviors get re-executed whenever something is added to\n   * the page through Ajax.\n   *\n   * You can attach as many behaviors as you wish. In fact, instead of overloading\n   * a single behavior with multiple, completely unrelated tasks you should create\n   * a separate behavior for every separate task.\n   *\n   * In most cases, there is no good reason to NOT wrap your JavaScript code in a\n   * behavior.\n   *\n   * @param context\n   *   The context for which the behavior is being executed. This is either the\n   *   full page or a piece of HTML that was just added through Ajax.\n   * @param settings\n   *   An array of settings (added through drupal_add_js()). Instead of accessing\n   *   Drupal.settings directly you should use this because of potential\n   *   modifications made by the Ajax callback that also produced 'context'.\n   */\n  Drupal.behaviors.friendsHideGalleryImage = {\n    attach: function (context, settings) {\n      // By using the 'context' variable we make sure that our code only runs on\n      // the relevant HTML. Furthermore, by using jQuery.once() we make sure that\n      // we don't run the same piece of code for an HTML snippet that we already\n      // processed previously. By using .once('foo') all processed elements will\n      // get tagged with a 'foo-processed' class, causing all future invocations\n      // of this behavior to ignore them.\n      $('.gallery--title', context).once('friends', function () {\n        $('.gallery--title + .gallery--image:empty').parent().remove();\n        // $('.gallery--image:empty').remove();\n        // $('.gallery-item:empty').remove();\n      });\n    }\n  };\n\n})(jQuery);\n"]}